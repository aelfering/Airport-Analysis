identify.equipment <- function(df){
# This function:
#   - identifies the airline's equipment (aircraft) being analyzed
#   - also flags 'all' if it is an overall cost
df$Airline.Name <- ifelse(grepl('All', Airline), 'All', NA)
return(df)
}
#### putting the functions to work and creating the final data frame ####
apply.tidy.list <- lapply(airline.list, tidy_xl_vs)
lapply(apply.tidy.list, identify.equipment)
apply.tidy.list
lapply(apply.tidy.list, identify.equipment)
#### functions ####
tidy_xl_vs <- function(df) {
# This function:
#   - identifies the year of the excel sheet and creates a variable for a column below
#   - cleans the overall excel spreadsheet and removes excess NA rows and columns
# identifying years and creating a column for them
years <- c(2000:2020)
y  <- NULL
for (i in years) {
year <- ifelse(grepl(i, colnames(df)[1]), i, NA)
y <- as.data.frame(rbind(y, year))
}
year <- as.integer(dplyr::filter(y, !is.na(V1)))
# removing unnecessary columns and rows
rate <- as.character(df[2,1])
airline <- as.character(df[2,2])
mark1 <- df %>%
filter(!is.na(`...2`)) %>%
mutate(Airline = airline,
Frequency = rate)
colnames(mark1)[1] <- "Metric"
colnames(mark1)[2] <- "Total"
mark2 <- mark1[-1, ]
mark2$Period <- year
return(mark2)}
identify.equipment <- function(df){
# This function:
#   - identifies the airline's equipment (aircraft) being analyzed
#   - also flags 'all' if it is an overall cost
df$Airline.Name <- ifelse(grepl('All', Airline, df), 'All', NA)
return(df)
}
#### putting the functions to work and creating the final data frame ####
apply.tidy.list <- lapply(airline.list, tidy_xl_vs)
lapply(apply.tidy.list, identify.equipment)
?grepl
#### functions ####
tidy_xl_vs <- function(df) {
# This function:
#   - identifies the year of the excel sheet and creates a variable for a column below
#   - cleans the overall excel spreadsheet and removes excess NA rows and columns
# identifying years and creating a column for them
years <- c(2000:2020)
y  <- NULL
for (i in years) {
year <- ifelse(grepl(i, colnames(df)[1]), i, NA)
y <- as.data.frame(rbind(y, year))
}
year <- as.integer(dplyr::filter(y, !is.na(V1)))
# removing unnecessary columns and rows
rate <- as.character(df[2,1])
airline <- as.character(df[2,2])
mark1 <- df %>%
filter(!is.na(`...2`)) %>%
mutate(Airline = airline,
Frequency = rate)
colnames(mark1)[1] <- "Metric"
colnames(mark1)[2] <- "Total"
mark2 <- mark1[-1, ]
mark2$Period <- year
return(mark2)}
identify.equipment <- function(df){
# This function:
#   - identifies the airline's equipment (aircraft) being analyzed
#   - also flags 'all' if it is an overall cost
df$Airline.Name <- ifelse(grepl('All', df$Airline), 'All', NA)
return(df)
}
#### putting the functions to work and creating the final data frame ####
apply.tidy.list <- lapply(airline.list, tidy_xl_vs)
lapply(apply.tidy.list, identify.equipment)
?substr
identify.equipment <- function(df){
# This function:
#   - identifies the airline's equipment (aircraft) being analyzed
#   - also flags 'all' if it is an overall cost
#   - also runs substr on the airline column to return the airline's IATA code
# identify the airline's equipment
df$Equipment <- ifelse(grepl('All', df$Airline), 'All', NA)
# identify the airline
df$Airline <- substr(df$Airline, 1, 2)
return(df)
}
tidy_xl_vs <- function(df) {
# This function:
#   - identifies the year of the excel sheet and creates a variable for a column below
#   - cleans the overall excel spreadsheet and removes excess NA rows and columns
# identifying years and creating a column for them
years <- c(2000:2020)
y  <- NULL
for (i in years) {
year <- ifelse(grepl(i, colnames(df)[1]), i, NA)
y <- as.data.frame(rbind(y, year))
}
year <- as.integer(dplyr::filter(y, !is.na(V1)))
# removing unnecessary columns and rows
rate <- as.character(df[2,1])
airline <- as.character(df[2,2])
mark1 <- df %>%
filter(!is.na(`...2`)) %>%
mutate(Airline = airline,
Frequency = rate)
colnames(mark1)[1] <- "Metric"
colnames(mark1)[2] <- "Total"
mark2 <- mark1[-1, ]
mark2$Period <- year
return(mark2)}
identify.equipment <- function(df){
# This function:
#   - identifies the airline's equipment (aircraft) being analyzed
#   - also flags 'all' if it is an overall cost
#   - also runs substr on the airline column to return the airline's IATA code
# identify the airline's equipment
df$Equipment <- ifelse(grepl('All', df$Airline), 'All', NA)
# identify the airline
df$Airline <- substr(df$Airline, 1, 2)
return(df)
}
#### putting the functions to work and creating the final data frame ####
apply.tidy.list <- lapply(airline.list, tidy_xl_vs)
lapply(apply.tidy.list, identify.equipment)
library(readxl)
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggplot2)
setwd("~/Documents/GitHub/Airport-Analysis/Visual Approach Aircraft Costs Tidying")
#### wrangling the data ####
files <- list.files(path = "~/Documents/GitHub/Airport-Analysis/Visual Approach Aircraft Costs Tidying/Data", pattern = "*.xls", full.names = T)
airline.list <- sapply(files, read_excel, simplify=FALSE)
#### functions ####
tidy_xl_vs <- function(df) {
# This function:
#   - identifies the year of the excel sheet and creates a variable for a column below
#   - cleans the overall excel spreadsheet and removes excess NA rows and columns
# identifying years and creating a column for them
years <- c(2000:2020)
y  <- NULL
for (i in years) {
year <- ifelse(grepl(i, colnames(df)[1]), i, NA)
y <- as.data.frame(rbind(y, year))
}
year <- as.integer(dplyr::filter(y, !is.na(V1)))
# removing unnecessary columns and rows
rate <- as.character(df[2,1])
airline <- as.character(df[2,2])
mark1 <- df %>%
filter(!is.na(`...2`)) %>%
mutate(Airline = airline,
Frequency = rate)
colnames(mark1)[1] <- "Metric"
colnames(mark1)[2] <- "Total"
mark2 <- mark1[-1, ]
mark2$Period <- year
return(mark2)}
identify.equipment <- function(df){
# This function:
#   - identifies the airline's equipment (aircraft) being analyzed
#   - also flags 'all' if it is an overall cost
#   - also runs substr on the airline column to return the airline's IATA code
# identify the airline's equipment
df$Equipment <- ifelse(grepl('All', df$Airline), 'All', NA)
# identify the airline
df$Airline <- substr(df$Airline, 1, 2)
return(df)
}
#### putting the functions to work and creating the final data frame ####
apply.tidy.list <- lapply(airline.list, tidy_xl_vs)
lapply(apply.tidy.list, identify.equipment)
airline.cost.df <- as.data.frame(do.call(rbind.data.frame, apply.tidy.list))
library(readxl)
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggplot2)
setwd("~/Documents/GitHub/Airport-Analysis/Visual Approach Aircraft Costs Tidying")
#### wrangling the data ####
files <- list.files(path = "~/Documents/GitHub/Airport-Analysis/Visual Approach Aircraft Costs Tidying/Data", pattern = "*.xls", full.names = T)
airline.list <- sapply(files, read_excel, simplify=FALSE)
#### functions ####
tidy_xl_vs <- function(df) {
# This function:
#   - identifies the year of the excel sheet and creates a variable for a column below
#   - cleans the overall excel spreadsheet and removes excess NA rows and columns
# identifying years and creating a column for them
years <- c(2000:2020)
y  <- NULL
for (i in years) {
year <- ifelse(grepl(i, colnames(df)[1]), i, NA)
y <- as.data.frame(rbind(y, year))
}
year <- as.integer(dplyr::filter(y, !is.na(V1)))
# removing unnecessary columns and rows
rate <- as.character(df[2,1])
airline <- as.character(df[2,2])
mark1 <- df %>%
filter(!is.na(`...2`)) %>%
mutate(Airline = airline,
Frequency = rate)
colnames(mark1)[1] <- "Metric"
colnames(mark1)[2] <- "Total"
mark2 <- mark1[-1, ]
mark2$Period <- year
return(mark2)}
identify.equipment <- function(df){
# This function:
#   - identifies the airline's equipment (aircraft) being analyzed
#   - also flags 'all' if it is an overall cost
#   - also runs substr on the airline column to return the airline's IATA code
# identify the airline's equipment
df$Equipment <- ifelse(grepl('All', df$Airline), 'All', NA)
# identify the airline
df$Airline <- substr(df$Airline, 1, 2)
return(df)
}
#### putting the functions to work and creating the final data frame ####
apply.tidy.list <- lapply(airline.list, tidy_xl_vs)
airline.name.cleaned <- lapply(apply.tidy.list, identify.equipment)
airline.cost.df <- as.data.frame(do.call(rbind.data.frame, airline.name.cleaned))
airline.cost.df
class(airline.cost.df)
head(airline.cost.df)
airline.cost.df[[1]]
airline.cost.df[1]
test <- airline.cost.df[1]
View(test)
colnames(airline.cost.df)
dplyr::select(airline.cost.df, Metric, Total, Airline)
do.call(rbind.data.frame, airline.name.cleaned)
do.call(rbind,airline.name.cleaned)
class(do.call(rbind,airline.name.cleaned))
mark1 <- do.call(rbind,airline.name.cleaned)
View(mark1)
View(airline.name.cleaned)
library(data.table)
rbindlist(airline.name.cleaned)
mark2 <- rbindlist(airline.name.cleaned)
View(mark2)
airline.cost.df <- rbindlist(airline.name.cleaned)
class(airline.cost.df)
str(airline.cost.df)
character.to.integer <- function(df, column_name){
df$column_name <- as.integer(df$column_name)
return(df)
}
str(airline.cost.df)
character.to.integer(character.to.integer, Total)
character.to.integer(airline.cost.df, Total)
airline.integer <- character.to.integer(airline.cost.df, Total)
str(airline.cost.df)
str(airline.integer)
character.to.integer <- function(df, column_name){
df$New.Total <- as.integer(df$column_name)
return(df)
}
#### putting the functions to work and creating the final data frame ####
apply.tidy.list <- lapply(airline.list, tidy_xl_vs)
airline.name.cleaned <- lapply(apply.tidy.list, identify.equipment)
airline.cost.df <- rbindlist(airline.name.cleaned)
airline.integer <- character.to.integer(airline.cost.df, Total)
str(airline.integer)
character.to.integer <- function(df, column_name){
df$New.Total <- as.integer(as.factor(df$column_name))
return(df)
}
#### putting the functions to work and creating the final data frame ####
apply.tidy.list <- lapply(airline.list, tidy_xl_vs)
airline.name.cleaned <- lapply(apply.tidy.list, identify.equipment)
airline.cost.df <- rbindlist(airline.name.cleaned)
airline.integer <- character.to.integer(airline.cost.df, Total)
str(airline.integer)
character.to.integer <- function(df, column_name){
df$New.Total <- as.numeric(df$column_name)
return(df)
}
#### putting the functions to work and creating the final data frame ####
apply.tidy.list <- lapply(airline.list, tidy_xl_vs)
airline.name.cleaned <- lapply(apply.tidy.list, identify.equipment)
airline.cost.df <- rbindlist(airline.name.cleaned)
airline.integer <- character.to.integer(airline.cost.df, Total)
str(airline.integer)
character.to.integer <- function(df){
df$New.Total <- as.numeric(df$Total)
return(df)
}
#### putting the functions to work and creating the final data frame ####
apply.tidy.list <- lapply(airline.list, tidy_xl_vs)
airline.name.cleaned <- lapply(apply.tidy.list, identify.equipment)
airline.cost.df <- rbindlist(airline.name.cleaned)
airline.integer <- character.to.integer(airline.cost.df, Total)
str(airline.integer)
character.to.integer(airline.cost.df, Total)
airline.integer <- character.to.integer(airline.cost.df)
airline.integer
airline.integer <- character.to.integer(airline.cost.df)
####  Visualizations  ####
ggplot(subset(airline.integer, Metric == 'Total Operating Expenses'),
aes(x = Period,
y = New.Total)) +
geom_step()
ggplot(subset(airline.integer, Metric == 'Total Operating Expenses'),
aes(x = Period,
y = New.Total)) +
geom_step() +
labs(title = 'Total Operating Expenses for Alaska Airlines per Departure',
subtitle = 'Between 2000-2019',
y = '',
x = 'Year',
caption = 'Source: Visual Approach\nVisualization by Alex Elfering')
ggplot(subset(airline.integer, Metric == 'Total Operating Expenses'),
aes(x = Period,
y = New.Total)) +
geom_step() +
geom_point(data = subset(airline.integer, Metric == 'Total Operating Expenses'),
mapping = aes(x = Period,
y = New.Total)) +
labs(title = 'Total Operating Expenses for Alaska Airlines per Departure',
subtitle = 'Between 2000-2019',
y = '',
x = 'Year',
caption = 'Source: Visual Approach\nVisualization by Alex Elfering')
dplyr::filter(airline.integer, Metric == 'Total Operating Expenses')
airline.integer
airline.integer.total.expense <- dplyr::filter(airline.integer, Metric == 'Total Operating Expenses')
airline.integer.fuel <- dplyr::filter(airline.integer, Metric == 'Fuel')
airline.integer.fuel
airline.integer.fuel %>%
inner_join(airline.integer.total.expense,
by = c('Airline' = 'Airline',
'Frequency' = 'Frequency',
'Period' = 'Period',
'Equipment' = 'Equipment'))
airline.integer.fuel %>%
inner_join(airline.integer.total.expense,
by = c('Airline' = 'Airline',
'Frequency' = 'Frequency',
'Period' = 'Period',
'Equipment' = 'Equipment')) %>%
select(Airline,
Metric.Num = Metric.x,
Metric.Dem = Metric.y,
Fuel.Total = New.Total.x,
Total.Op.Exp = New.Total.y) %>%
mutate(Ratio = Fuel.Total/Total.Op.Exp)
fuel_ratio <- airline.integer.fuel %>%
inner_join(airline.integer.total.expense,
by = c('Airline' = 'Airline',
'Frequency' = 'Frequency',
'Period' = 'Period',
'Equipment' = 'Equipment')) %>%
select(Airline,
Period,
Metric.Num = Metric.x,
Metric.Dem = Metric.y,
Fuel.Total = New.Total.x,
Total.Op.Exp = New.Total.y) %>%
mutate(Ratio = Fuel.Total/Total.Op.Exp)
ggplot(fuel_ratio,
aes(x = Period,
y = Ratio)) +
geom_step() +
scale_y_continuous(labels = scales::percent)
ggplot(fuel_ratio,
aes(x = Period,
y = Ratio)) +
geom_step() +
geom_point(data = fuel_ratio,
mapping = aes(x = Period,
y = Ratio))
scale_y_continuous(labels = scales::percent)
ggplot(fuel_ratio,
aes(x = Period,
y = Ratio)) +
geom_step() +
geom_point(data = fuel_ratio,
mapping = aes(x = Period,
y = Ratio)) +
scale_y_continuous(labels = scales::percent) +
labs(title = 'Fuel as Percent of Total Operating Expenses for Alaska Airlines per Departure',
subtitle = 'The ratio climbed rapidly starting in 2005 and only started to really fall in 2015.',
y = 'Ratio',
x = 'Year',
caption = 'Source: Visual Approach\nVisualization by Alex Elfering')
list.of.packages <- c("ggplot2",
"dplyr",
'tidyverse',
'tidyr',
'readxl',
'data.table')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(readxl)
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggplot2)
library(data.table)
setwd("~/Documents/GitHub/Airport-Analysis/Visual Approach Aircraft Costs Tidying")
#### wrangling the data ####
files <- list.files(path = "~/Documents/GitHub/Airport-Analysis/Visual Approach Aircraft Costs Tidying/Data", pattern = "*.xls", full.names = T)
airline.list <- sapply(files, read_excel, simplify=FALSE)
#### functions ####
tidy_xl_vs <- function(df) {
# This function:
#   - identifies the year of the excel sheet and creates a variable for a column below
#   - cleans the overall excel spreadsheet and removes excess NA rows and columns
# identifying years and creating a column for them
years <- c(2000:2020)
y  <- NULL
for (i in years) {
year <- ifelse(grepl(i, colnames(df)[1]), i, NA)
y <- as.data.frame(rbind(y, year))
}
year <- as.integer(dplyr::filter(y, !is.na(V1)))
# removing unnecessary columns and rows
rate <- as.character(df[2,1])
airline <- as.character(df[2,2])
mark1 <- df %>%
filter(!is.na(`...2`)) %>%
mutate(Airline = airline,
Frequency = rate)
colnames(mark1)[1] <- "Metric"
colnames(mark1)[2] <- "Total"
mark2 <- mark1[-1, ]
mark2$Period <- year
return(mark2)}
identify.equipment <- function(df){
# This function:
#   - identifies the airline's equipment (aircraft) being analyzed
#   - also flags 'all' if it is an overall cost
#   - also runs substr on the airline column to return the airline's IATA code
# identify the airline's equipment
df$Equipment <- ifelse(grepl('All', df$Airline), 'All', NA)
# identify the airline
df$Airline <- substr(df$Airline, 1, 2)
return(df)
}
character.to.integer <- function(df){
df$New.Total <- as.numeric(df$Total)
return(df)
}
#### putting the functions to work and creating the final data frame ####
apply.tidy.list <- lapply(airline.list, tidy_xl_vs)
airline.name.cleaned <- lapply(apply.tidy.list, identify.equipment)
airline.cost.df <- rbindlist(airline.name.cleaned)
airline.integer <- character.to.integer(airline.cost.df)
####  Visualizations  ####
ggplot(subset(airline.integer, Metric == 'Total Operating Expenses'),
aes(x = Period,
y = New.Total)) +
geom_step() +
geom_point(data = subset(airline.integer, Metric == 'Total Operating Expenses'),
mapping = aes(x = Period,
y = New.Total)) +
labs(title = 'Total Operating Expenses for Alaska Airlines per Departure',
subtitle = 'Between 2000-2019',
y = '',
x = 'Year',
caption = 'Source: Visual Approach\nVisualization by Alex Elfering')
# What is the fuel cost to total expense ratio?
airline.integer.total.expense <- dplyr::filter(airline.integer, Metric == 'Total Operating Expenses')
airline.integer.fuel <- dplyr::filter(airline.integer, Metric == 'Fuel')
fuel_ratio <- airline.integer.fuel %>%
inner_join(airline.integer.total.expense,
by = c('Airline' = 'Airline',
'Frequency' = 'Frequency',
'Period' = 'Period',
'Equipment' = 'Equipment')) %>%
select(Airline,
Period,
Metric.Num = Metric.x,
Metric.Dem = Metric.y,
Fuel.Total = New.Total.x,
Total.Op.Exp = New.Total.y) %>%
mutate(Ratio = Fuel.Total/Total.Op.Exp)
ggplot(fuel_ratio,
aes(x = Period,
y = Ratio)) +
geom_step() +
geom_point(data = fuel_ratio,
mapping = aes(x = Period,
y = Ratio)) +
scale_y_continuous(labels = scales::percent) +
labs(title = 'Fuel as Percent of Total Operating Expenses for Alaska Airlines per Departure',
subtitle = 'The ratio climbed rapidly starting in 2005 and only started to really fall in 2015.',
y = 'Ratio',
x = 'Year',
caption = 'Source: Visual Approach\nVisualization by Alex Elfering')
airline.list
lapply(airline.list, tidy_xl_vs)
lapply(apply.tidy.list, identify.equipment)
character.to.integer <- function(df){
df$Total <- as.numeric(df$Total)
return(df)
}
apply.tidy.list <- lapply(airline.list, tidy_xl_vs)
airline.name.cleaned <- lapply(apply.tidy.list, identify.equipment)
airline.cost.df <- rbindlist(airline.name.cleaned)
airline.integer <- character.to.integer(airline.cost.df)
airline.integer
